#!/usr/bin/env python

import sys
import os
from os import path
import json
from subprocess import call
from StringIO import StringIO

def minify(root, name, platform, manifest):
	src = path.join(".app." + platform, "qml.js")
	with open(path.join(".app." + platform, "qml.min.js"), "w") as out:
		call(["java", "-jar", path.join(root, "compiler/gcc/compiler.jar"),
			"--warning_level", "VERBOSE", "--externs",
			path.join(root, "compiler/gcc/jquery-1.9.js"),
			src], stdout = out)
	os.remove(src)

def copy(source, destination):
	call(['cp', '-ur'] + [path.join(source, file_) for file_ in os.listdir(source)] + [destination])


def build(root, name, platform, manifest):
	print "building %s for %s..." %(name, platform)
	target = '.app.' + platform
	try:
		os.mkdir(target)
	except:
		pass

	platform_path = path.join(root, 'platform', platform)
	call([path.join(root, 'qml-compiler'), '-o', target, path.join(root, 'core'), platform_path, '.'])
	if ('minify' in manifest) and manifest['minify']:
		minify(root, name, platform, manifest)

	print "copying resources..."

	copy(path.join(root, 'dist'), target)

	platform_dist = path.join(platform_path, 'dist')
	if path.isdir(platform_dist):
		copy(platform_dist, target)

	project_dist = path.join(os.getcwd(), 'dist')
	if path.isdir(project_dist):
		copy(project_dist, target)

	if path.isdir('res'):
		call(['cp', '-ur', 'res', target])


root = os.path.dirname(sys.argv[0])

platforms = None
with open('.manifest') as f:
	manifest = json.load(f)

name = manifest['name']

if 'platforms' in manifest:
	platforms = manifest['platforms']

if not platforms:
	print "WARNING: .manifest was not found, building for html5 platform"
	platforms = ['html5']

for platform in platforms:
	build(root, name, platform, manifest)
