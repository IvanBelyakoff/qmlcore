#!/usr/bin/env python

import sys
import os
from os import path
import json
from subprocess import call
from StringIO import StringIO
import argparse
import re

parser = argparse.ArgumentParser('qml translation tool')
parser.add_argument('--minify', '-m', action='store_true', default=False, help='force minify step')
parser.add_argument('--devel', '-d', action='store_true', default=False, help='development mode, listen for changed files, rebuild if changed')
parser.add_argument('--keep-temp', '-k', action='store_true', default=False, help='keep temp files (e.g qml.js)')
args = parser.parse_args()

def minify_uglify(out, src, root, name, app, platform, manifest):
	call(["uglifyjs",
		src,
		"-c",
		"-m"
		], stdout = out)

def minify_gcc(out, src, root, name, app, platform, manifest):
	call(["java", "-jar", path.join(root, "compiler/gcc/compiler.jar"),
		"--warning_level", "VERBOSE",
		"--externs", path.join(root, "compiler/gcc/jquery-1.9.js"),
		"--process_jquery_primitives",
		"--jscomp_off=missingProperties",
		src], stdout = out)

def minify(root, name, app, platform, manifest):
	src = path.join(".app." + platform, "qml.%s.js" % app)
	dstname = "qml.%s.min.js" %app
	tool = manifest.get('minify', True)
	if isinstance(tool, bool):
		tool = 'uglify-js'

	with open(path.join(".app." + platform, dstname), "w") as out:
		if tool == 'uglify-js':
			try:
				minify_uglify(out, src, root, name, app, platform, manifest)
			except:
				print "WARNING: you don't seem to have uglifyjs installed. please run `sudo npm install -g uglify-js`, falling back to gcc"
				tool = 'gcc'

		if tool == 'gcc':
			minify_gcc(out, src, root, name, app, platform, manifest)

	if not args.keep_temp:
		os.remove(src)
	return dstname

var_re = re.compile(r'{{([\w\.]+)}}', re.MULTILINE)
block_re = re.compile(r'{%.*?%}', re.MULTILINE | re.IGNORECASE)

def process_template_simple(destination, source, context):
	_head, name = path.split(source)
	destination = path.join(destination, context['html'] + '.html')
	with open(destination, 'wb') as fd, open(source) as fs:
		data = fs.read()
		data = var_re.sub(lambda x: context.get(x.group(1), ''), data)
		data = block_re.sub('', data)
		fd.write(data)

def process_template_jinja2(destination, source, context):
	from jinja2 import Environment, FileSystemLoader
	src, name = path.split(source)
	env = Environment(loader=FileSystemLoader(context['template_path']))
	template = env.get_template(name)
	destination = path.join(destination, context['html'] + '.html')
	with open(destination, 'w') as fd:
		fd.write(template.render(**context).encode('utf-8'))

def process_template(destination, source, context):
	t = context['templater']
	if t == 'simple':
		process_template_simple(destination, source, context)
	elif t == 'jinja2':
		process_template_jinja2(destination, source, context)
	else:
		raise Exception('unknown templater used: %s' %t)

def copy(source, destination, context):
	files = [path.join(source, file_) for file_ in os.listdir(source)]
	copy_src = []
	for src in files:
		_path, name = path.split(src)
		if name == 'index.html':
			process_template(destination, src, context)
		else:
			name, ext = path.splitext(name)
			if ext == '.html' and context['html'] == name:
				process_template(destination, src, context)
			else:
				copy_src.append(src)
	if copy_src:
		call(['cp', '-r'] + copy_src + [destination])


def build(root, name, platform, app, html, manifest):
	print "building %s.%s for %s..." %(name, app, platform)
	target = '.app.' + platform
	try:
		os.mkdir(target)
	except:
		pass

	platform_path = path.join(root, 'platform', platform)

	paths = []
	if 'path' in manifest:
		paths = manifest['path']

	options = ['-o', target, path.join(root, 'core'), platform_path]
	options.extend(paths)
	options.extend(['.', '-a', app])

	if args.devel:
		options.insert(0, '-w')

	call([path.join(root, 'qml-compiler')] + options)
	script = 'qml.%s.js' %app #fixme

	if args.minify or (('minify' in manifest) and manifest['minify']):
		script = minify(root, name, app, platform, manifest)
	templater = manifest.get('templater', 'simple')

	print "copying resources..."
	context = { 'id': app, 'app': script, 'html': html, 'templater': templater }

	copy(path.join(root, 'dist'), target, context)

	template_path = []

	platform_dist = path.join(platform_path, 'dist')
	if path.isdir(platform_dist):
		template_path.append(platform_dist)


	project_dist = path.join(os.getcwd(), 'dist')
	if path.isdir(project_dist):
		template_path.append(project_dist)

	context['template_path'] = template_path
	for dist in template_path:
		copy(dist, target, context)

	if path.isdir('res'):
		call(['cp', '-ur', 'res', target])


root = os.path.dirname(sys.argv[0])

platforms = None
apps = {'app': 'index.html' }
with open('.manifest') as f:
	manifest = json.load(f)

name = manifest['name']

if 'platforms' in manifest:
	platforms = manifest['platforms']

if 'apps' in manifest:
	apps = manifest['apps']

if not platforms:
	print "WARNING: .manifest was not found, building for html5 platform"
	platforms = ['html5']

for platform in platforms:
	for app in apps:
		html = apps[app]
		build(root, name, platform, app, html, manifest)
