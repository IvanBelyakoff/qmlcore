#!/usr/bin/env python2.7

import compiler.doc.md
import compiler.doc.qml
import compiler.doc.json
import compiler.pyparsing
import compiler.grammar
import compiler.manifest
import compiler.js
import compiler.lang
import argparse
import os, os.path
import hashlib
import cPickle
import inspect
import sys

parser = argparse.ArgumentParser()
parser.add_argument("directory", nargs='+')
parser.add_argument("-a", dest="app")
parser.add_argument("-p", dest="prefix", default = False, action = 'store_true')
parser.add_argument("-m", dest="manifest")
parser.add_argument("-o", dest="output", default=".")
parser.add_argument("-w", dest="wait", default=False, action='store_true')
parser.add_argument("-S", dest="strict", default=True, action="store_false")
parser.add_argument("-D", dest="doc")
parser.add_argument("-Df", dest="doc_format")
parser.add_argument("-r", dest="release", default=False, action='store_true')
parser.add_argument("-v", dest="verbose", default=False, action='store_true')
args = parser.parse_args()

if args.doc_format == "qml":
    documentation = compiler.doc.qml.Documentation(args.doc) if args.doc else None
elif args.doc_format == "json":
    documentation = compiler.doc.json.Documentation(args.doc) if args.doc else None
else:
    documentation = compiler.doc.md.Documentation(args.doc) if args.doc else None

if args.wait:
	try:
		import pyinotify
	except:
		raise Exception("seems that you don't have pyinotify module installed, you can't use -w without it")

compiler.grammar.source.parseWithTabs()

data = ""
data += inspect.getsource(compiler.grammar)
data += inspect.getsource(compiler.lang)
data += inspect.getsource(compiler.pyparsing)
grammar_digest = hashlib.sha1(data).hexdigest()

try:
	os.mkdir(".cache")
except:
	pass

project_dirs = args.directory
output_dir = args.output
root_manifest = None

if args.manifest:
	with open(args.manifest) as f:
		root_manifest = compiler.manifest.load(f)


def check_file(filename):
	if filename[0] == '.':
		return False
	root, ext = os.path.splitext(filename)
	return ext in set([".qml", ".js"])


def process_file(generator, app, package, dirpath, filename):
	name, ext = os.path.splitext(filename)
	if name[0] == '.':
		return

	com = "%s.%s" %(package, name)
	path = os.path.join(dirpath, filename)
	if ext == ".qml":
		if name[0].islower():
			if app != name:
				#print "skipping", name
				return

		cached_path = os.path.join(".cache", com)
		with open(path) as f:
			data = f.read()
			h = hashlib.sha1(grammar_digest + data).hexdigest()

		try:
			with open(cached_path) as f:
				if f.readline().strip() != h:
					raise Exception("invalid hash")
				tree = cPickle.load(f)
		except:
			print "parsing", path, "...", com
			try:
				tree = compiler.grammar.parse(data)
				with open(cached_path, "w") as f:
					f.write(h + "\n")
					cPickle.dump(tree, f)
			except Exception as ex:
				ex.filename = path
				raise

		assert(len(tree) == 1)
		if documentation and name[0].isupper():
			documentation.add(com, tree[0])
		generator.add_component(com, tree[0], name[0].isupper())
	elif ext == ".js":
		with open(path) as f:
			data = f.read()
		if args.verbose:
			print "including js file...", path
		generator.add_js(com, data)
	elif ext == '.ts':
		generator.add_ts(path)


notifier = None
modified = False

if args.wait:
	from pyinotify import WatchManager
	wm = WatchManager()
	mask = pyinotify.IN_MODIFY | pyinotify.IN_CREATE
	for dir in project_dirs:
		wm.add_watch(dir, mask)

	def process_event(event):
		global modified
		if check_file(event.name):
			modified = True

	notifier = pyinotify.Notifier(wm, process_event)

def process_files(generator, app, dirs):
	for project_dir in dirs:
		path = project_dir.split(os.path.sep)
		package_dir = project_dir
		package_name = path[-1]
		if root_manifest and root_manifest.package and len(path) <= 1: #root component
			package_name = str(root_manifest.package)

		for dirpath, dirnames, filenames in os.walk(project_dir, topdown = True):
			dirnames[:] = [name for name in dirnames if name[:6] != 'build.']
			if '.nocompile' in filenames:
				dirnames[:] = []
				continue

			if '.manifest' in filenames:
				with open(os.path.join(dirpath, '.manifest')) as f:
					manifest = compiler.manifest.load(f)
					if manifest.package:
						package_name = manifest.package.encode('utf-8')
						package_dir = dirpath

			for filename in filenames:
				relpath = os.path.relpath(dirpath, package_dir)
				if relpath.startswith('..'):
					#files in current dir, reset to initial state
					package_dir = project_dir
					package_name = project_dir.split(os.path.sep)[-1]
					relpath = os.path.relpath(dirpath, package_dir)

				if relpath == '.':
					relpath = []
				else:
					relpath = relpath.split(os.path.sep)

				package = ".".join([package_name] + relpath)
				process_file(generator, app, package, dirpath, filename)

def generate():
	namespace = "qml"
	generator = compiler.js.generator(namespace)

#reading .core.js files to bootstrap platform specific initialization
	init_js = ''
	for project_dir in reversed(project_dirs):
		init_path = os.path.join(project_dir, '.core.js')
		if os.path.exists(init_path):
			if args.verbose:
				print 'including platform initialisation file at %s' %init_path
			with open(init_path) as f:
				init_js += f.read()

	init_js = generator.replace_args(init_js)

	process_files(generator, args.app, project_dirs)
	if args.verbose:
		print "generating sources..."
	app = ""
	if args.strict:
		app += "'use strict'\n"
	if args.release:
		app += "var log = function() { }\n"
	else:
		app += "var log = null\n"
	app += "/** @const @type {!CoreObject} */\n"
	app += "var " + generator.generate()
	app += generator.generate_startup(namespace, args.app, namespace if args.prefix else '')
	app = app.replace('/* ${init.js} */', init_js)

	with open(os.path.join(output_dir, namespace + "." + args.app + ".js"), "wt") as f:
		f.write(app)

	if documentation:
		documentation.generate()

	print "done"


while True:
	try:
		generate()
	except Exception as ex:
		if not args.wait:
			if hasattr(ex, 'filename'):
				if hasattr(ex, 'lineno'):
					loc = '%s:%d:%d: ' %(ex.filename, ex.lineno, ex.col)
				else:
					loc = '%s: ' %ex.filename
			else:
				loc = ''
			msg = '%serror: %s' %(loc, ex)
			if hasattr(ex, 'line'):
				msg += '\n' + ex.line
			print msg
			if args.verbose:
				raise
			sys.exit(1)

		import time, traceback
		traceback.print_exc()
		time.sleep(1)
		continue

	if not args.wait:
		break

	while True:
		if notifier.check_events():
			notifier.read_events()
			notifier.process_events()
			if not modified:
				continue
			else:
				modified = False
				break
