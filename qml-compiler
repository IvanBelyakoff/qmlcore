#!/usr/bin/env python

import compiler.grammar
import compiler.js
import argparse
import os

parser = argparse.ArgumentParser()
parser.add_argument("directory", nargs='+')
parser.add_argument("-o", dest="output", default=".")
parser.add_argument("-w", dest="wait", default=False, action='store_true')
args = parser.parse_args()
print args

compiler.grammar.source.parseWithTabs()

project_dirs = args.directory
output_dir = args.output

def process_file(dirpath, filename):
	root, ext = os.path.splitext(filename)
	path = os.path.join(dirpath, filename)
	if ext == ".qml":
		com = ".".join(dirpath.split(os.path.sep) + [root])
		print "parsing", path, "...", com
		with open(path) as f:
			data = f.read()
		tree = compiler.grammar.parse(data)
		generator.add_components(com, tree, root[0].isupper())
	elif ext == ".js":
		with open(path) as f:
			data = f.read()
		print "including js file...", path
		generator.add_js(path, data)


def process_files(dirs):
	for project_dir in dirs:
		for dirpath, dirnames, filenames in os.walk(project_dir):
			for filename in filenames:
				process_file(dirpath, filename)

while True:
	generator = compiler.js.generator()

	process_files(project_dirs)
	print "generating sources..."
	namespace = "qml"
	app = generator.generate(namespace)
	app += generator.generate_startup()
	with open(os.path.join(output_dir, namespace + ".js"), "wt") as f:
		f.write(app)

	if not args.wait:
		break
